C251 COMPILER V5.60.0,  isr                                                                16/07/23  02:20:40  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE isr
OBJECT MODULE PLACED IN .\Out_File\isr.obj
COMPILER INVOKED BY: D:\keil5\C251\BIN\C251.EXE ..\USER\src\isr.c LARGE INTR2 WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BROWSE I
                    -NCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\i
                    -nc;..\USER\src) DEBUG PRINT(.\Out_File\isr.lst) OBJECT(.\Out_File\isr.obj) 

stmt  level    source

    1          ///******************************************************************************************************
             -***************
    2          // * COPYRIGHT NOTICE
    3          // * Copyright (c) 2020,逐飞科技
    4          // * All rights reserved.
    5          // * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6          // *
    7          // * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8          // * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9          // *
   10          // * @file                      isr
   11          // * @company                   成都逐飞科技有限公司
   12          // * @author                    逐飞科技(QQ790875685)
   13          // * @version                   查看doc内version文件 版本说明
   14          // * @Software                  MDK FOR C251 V5.60
   15          // * @Target core               STC16F40K128
   16          // * @Taobao                    https://seekfree.taobao.com/
   17          // * @date                      2020-4-14
   18          // ******************************************************************************************************
             -**************/
   19          #include "headfile.h"
   20          #include "data.h"
   21          #include "speed.h"
   22          #include "math.h"
   23          #include "kaerman.h"
   24          #include "filter.h"
   25          #include "keyboard.h"
   26          char *p = uart_str;
   27          int16 spL;
   28          int16 spR;
   29          float k1;
   30          // UART1中断
   31          void UART1_Isr() interrupt 4
   32          {
   33   1          uint8 res;
   34   1          static uint8 dwon_count;
   35   1          if (UART1_GET_TX_FLAG)
   36   1          {
   37   2              UART1_CLEAR_TX_FLAG;
   38   2              busy[1] = 0;
   39   2          }
   40   1          if (UART1_GET_RX_FLAG)
   41   1          {
   42   2              UART1_CLEAR_RX_FLAG;
   43   2              res = SBUF;
   44   2              *p = (char)SBUF;
   45   2              if (*p == '#')
   46   2              {
   47   3                  *++p = '\0';
   48   3                  p = uart_str;
   49   3                  finish_flag = 1;
   50   3              }
   51   2              else
   52   2              {
   53   3                  p++;
   54   3              }
   55   2      
C251 COMPILER V5.60.0,  isr                                                                16/07/23  02:20:40  PAGE 2   

   56   2              // uart_putchar(DEBUG_UART,SBUF);
   57   2              //程序自动下载
   58   2              if (res == 0x7F)
   59   2              {
   60   3                  if (dwon_count++ > 20)
   61   3                      IAP_CONTR = 0x60;
   62   3              }
   63   2              else
   64   2              {
   65   3                  dwon_count = 0;
   66   3              }
   67   2          }
   68   1      }
   69          
   70          // UART2中断
   71          void UART2_Isr() interrupt 8
   72          {
   73   1          if (UART2_GET_TX_FLAG)
   74   1          {
   75   2              UART2_CLEAR_TX_FLAG;
   76   2              busy[2] = 0;
   77   2          }
   78   1          if (UART2_GET_RX_FLAG)
   79   1          {
   80   2              UART2_CLEAR_RX_FLAG;
   81   2              //接收数据寄存器为：S2BUF
   82   2          }
   83   1      }
   84          
   85          // UART3中断
   86          void UART3_Isr() interrupt 17
   87          {
   88   1          if (UART3_GET_TX_FLAG)
   89   1          {
   90   2              UART3_CLEAR_TX_FLAG;
   91   2              busy[3] = 0;
   92   2          }
   93   1          if (UART3_GET_RX_FLAG)
   94   1          {
   95   2              UART3_CLEAR_RX_FLAG;
   96   2              //接收数据寄存器为：S3BUF
   97   2          }
   98   1      }
   99          
  100          // UART4中断
  101          void UART4_Isr() interrupt 18
  102          {
  103   1          if (UART4_GET_TX_FLAG)
  104   1          {
  105   2              UART4_CLEAR_TX_FLAG;
  106   2              busy[4] = 0;
  107   2          }
  108   1          if (UART4_GET_RX_FLAG)
  109   1          {
  110   2              UART4_CLEAR_RX_FLAG;
  111   2              //接收数据寄存器为：S4BUF;
  112   2      
  113   2              //接收数据寄存器为：S4BUF;
  114   2              if (wireless_type == WIRELESS_SI24R1)
  115   2              {
  116   3                  wireless_uart_callback(); //无线转串口回调函数
  117   3              }
  118   2              else if (wireless_type == WIRELESS_CH9141)
  119   2              {
  120   3                  bluetooth_ch9141_uart_callback(); //蓝牙转串口回调函数
  121   3              }
C251 COMPILER V5.60.0,  isr                                                                16/07/23  02:20:40  PAGE 3   

  122   2              else if (wireless_type == WIRELESS_CH573)
  123   2              {
  124   3                  wireless_ch573_callback(); // CH573无线模块回调函数
  125   3              }
  126   2          }
  127   1      }
  128          
  129          void INT0_Isr() interrupt 0
  130          {
  131   1          encoder_count++;
  132   1      }
  133          void INT1_Isr() interrupt 2
  134          {
  135   1      }
  136          void INT2_Isr() interrupt 10
  137          {
  138   1          INT2_CLEAR_FLAG; //清除中断标志
  139   1      }
  140          void INT3_Isr() interrupt 11
  141          {
  142   1          INT3_CLEAR_FLAG; //清除中断标志
  143   1      }
  144          
  145          void INT4_Isr() interrupt 16
  146          {
  147   1          INT4_CLEAR_FLAG; //清除中断标志
  148   1      }
  149          
  150          void TM0_Isr() interrupt 1
  151          {
  152   1      }
  153          void TM1_Isr() interrupt 3
  154          {
  155   1      }
  156          void TM2_Isr() interrupt 12
  157          {
  158   1          TIM2_CLEAR_FLAG; //清除中断标志
  159   1      }
  160          void TM3_Isr() interrupt 19
  161          {
  162   1          TIM3_CLEAR_FLAG; //清除中断标志
  163   1      }
  164          
  165          #define DIRL P35
  166          #define DIRR P53
  167          
  168          #define MAX_MIDDLE 769.0
  169          #define MIN_MIDDLE 213.0
  170          void TM4_Isr() interrupt 20
  171          {
  172   1          TIM4_CLEAR_FLAG;     //清除中断标志
  173   1          dl1a_get_distance(); //获取TOF距离
  174   1      
  175   1          tof_distance = dl1a_distance_mm;
  176   1          time_count++;
  177   1          //获取电感的读数
  178   1          adc_select();
  179   1          /*adc_data[0] = MovingAverageFilter0(adc_once(ADC_P00, ADC_10BIT));
  180   1          adc_data[1] = MovingAverageFilter1(adc_once(ADC_P01, ADC_10BIT));
  181   1          adc_data[2] = MovingAverageFilter2(adc_once(ADC_P05, ADC_10BIT));
  182   1          adc_data[3] = MovingAverageFilter3(adc_once(ADC_P06, ADC_10BIT));
  183   1          adc_data[4] = MovingAverageFilter4(adc_once(ADC_P02, ADC_10BIT));
  184   1          adc_data[5] = MovingAverageFilter5(adc_once(ADC_P10, ADC_10BIT));
  185   1          adc_data[6] = MovingAverageFilter6(adc_once(ADC_P11, ADC_10BIT));
  186   1          adc_data[7] = MovingAverageFilter7(adc_once(ADC_P15, ADC_10BIT));
  187   1          adc_data[8] = MovingAverageFilter8(adc_once(ADC_P16, ADC_10BIT));
C251 COMPILER V5.60.0,  isr                                                                16/07/23  02:20:40  PAGE 4   

  188   1          adc_data[9] = MovingAverageFilter9(adc_once(ADC_P14, ADC_10BIT));*/
  189   1          /*adc_data[0] = adc_once(ADC_P00, ADC_10BIT);
  190   1          adc_data[1] = adc_once(ADC_P01, ADC_10BIT);
  191   1          adc_data[2] = adc_once(ADC_P05, ADC_10BIT);
  192   1          adc_data[3] = adc_once(ADC_P06, ADC_10BIT);
  193   1          adc_data[4] = adc_once(ADC_P02, ADC_10BIT);
  194   1          adc_data[5] = adc_once(ADC_P10, ADC_10BIT);
  195   1          adc_data[6] = adc_once(ADC_P11, ADC_10BIT);
  196   1          adc_data[7] = adc_once(ADC_P15, ADC_10BIT);
  197   1          adc_data[8] = adc_once(ADC_P16, ADC_10BIT);
  198   1          adc_data[9] = adc_once(ADC_P14, ADC_10BIT);*/
  199   1          Angle_Cal();                           //姿态解算
  200   1          all_distance += (speedL + speedR) / 2; //全局行驶距离
  201   1          // imu963ra_get_mag();                         //获取磁力计数据
  202   1          gyro1 = (float)KalmanFilter((double)imu963ra_gyro_z); //陀螺仪值（滤波后）
  203   1          // gyro1 = (float)imu963ra_gyro_z;
  204   1          gyro = gyro1 - gyro_add; //除零飘
  205   1          if (gyro > 5000)
  206   1          {
  207   2              gyro = 5000;
  208   2          }
  209   1          if (gyro < -5000)
  210   1          {
  211   2              gyro = -5000;
  212   2          }
  213   1          all_angle += gyro / 2922.22; //转化为实际物理量
  214   1          // if (all_angle < -180)
  215   1          //     all_angle += 360;
  216   1          // if (all_angle > 180)
  217   1          //     all_angle -= 360;
  218   1          // all_angle =all_angle % 180;
  219   1          //普通差比和，线性度较差
  220   1          //   k=50*(adc_data[3]-adc_data[0])/(adc_data[3]+adc_data[0]);
  221   1      
  222   1          //计算误差K，使用带根号的差比和算法更加线性
  223   1          if (adc_data[4] > 0 && adc_data[0] > 0)
  224   1              k = -50 * (sqrt(adc_data[4]) - sqrt(adc_data[0])) / (sqrt(adc_data[4]) + sqrt(adc_data[0]));
  225   1          if (adc_data[5] > 0 && adc_data[9] > 0)
  226   1              k1 = -50 * (sqrt(adc_data[9]) - sqrt(adc_data[5])) / (sqrt(adc_data[9]) + sqrt(adc_data[5]));
  227   1      
  228   1          if (adc_data[4]<120 && adc_data[0]<120 && annulus_flag == 0)
  229   1          {
  230   2              k = k1;
  231   2          }
  232   1          // k = 50 * (sqrt(adc_data[3]) - sqrt(adc_data[0])) / ( sqrt(adc_data[3]) + sqrt(adc_data[2]) + sqrt(
             -adc_data[0]) );
  233   1          // else
  234   1          //    k = 0;
  235   1          // if (sqrt(MAX_MIDDLE) - sqrt((float)adc_data[2]) > 0)
  236   1          // {
  237   1          //     // k=50*(sqrt(MAX_MIDDLE)-sqrt((float)adc_data[2]))/sqrt(MAX_MIDDLE);
  238   1          //     k = 50 * fabs((sqrt(MAX_MIDDLE) - sqrt((float)adc_data[2])) / (sqrt(MAX_MIDDLE)));
  239   1          //     if (k > 50)
  240   1          //         k = 50;
  241   1          // }
  242   1          // else
  243   1          // {
  244   1          //     k = 0;
  245   1          // }
  246   1      
  247   1          // if (adc_data[4] > adc_data[0])
  248   1          //     k *= -1;
  249   1      
  250   1          // if (adc_data[2] > MAX_MIDDLE + 10)
  251   1          // {
  252   1          //     k = 50 * (sqrt(adc_data[4]) - sqrt(adc_data[0])) / (sqrt(adc_data[4]) + sqrt(adc_data[0]));
C251 COMPILER V5.60.0,  isr                                                                16/07/23  02:20:40  PAGE 5   

  253   1          //     if (k > 50)
  254   1          //         k = 50;
  255   1          // }
  256   1      
  257   1          renew(); //控制函数
  258   1          //读取实际速度
  259   1          spL = ctimer_count_read(CTIM0_P34);
  260   1          spR = ctimer_count_read(CTIM3_P04);
  261   1      
  262   1          if (DIRL == 1)
  263   1          {
  264   2              if (spL < 600)
  265   2                  speedL = spL;
  266   2          }
  267   1          else
  268   1          {
  269   2              if (spL < 600)
  270   2                  speedL = spL * -1;
  271   2          }
  272   1          ctimer_count_clean(CTIM0_P34);
  273   1          if (DIRR != 1)
  274   1          {
  275   2              if (spR < 600)
  276   2                  speedR = spR;
  277   2          }
  278   1          else
  279   1          {
  280   2              if (spR < 600)
  281   2                  speedR = spR * -1;
  282   2          }
  283   1          ctimer_count_clean(CTIM3_P04);
  284   1      
  285   1          if (P67 != 1)
  286   1          {
  287   2              speed3 = -(int16)encoder_count;
  288   2          }
  289   1          else
  290   1          {
  291   2              speed3 = encoder_count;
  292   2          }
  293   1          encoder_count = 0;
  294   1      }
  295          
  296          // void  INT0_Isr()  interrupt 0;
  297          // void  TM0_Isr()   interrupt 1;
  298          // void  INT1_Isr()  interrupt 2;
  299          // void  TM1_Isr()   interrupt 3;
  300          // void  UART1_Isr() interrupt 4;
  301          // void  ADC_Isr()   interrupt 5;
  302          // void  LVD_Isr()   interrupt 6;
  303          // void  PCA_Isr()   interrupt 7;
  304          // void  UART2_Isr() interrupt 8;
  305          // void  SPI_Isr()   interrupt 9;
  306          // void  INT2_Isr()  interrupt 10;
  307          // void  INT3_Isr()  interrupt 11;
  308          // void  TM2_Isr()   interrupt 12;
  309          // void  INT4_Isr()  interrupt 16;
  310          // void  UART3_Isr() interrupt 17;
  311          // void  UART4_Isr() interrupt 18;
  312          // void  TM3_Isr()   interrupt 19;
  313          // void  TM4_Isr()   interrupt 20;
  314          // void  CMP_Isr()   interrupt 21;
  315          // void  I2C_Isr()   interrupt 24;
  316          // void  USB_Isr()   interrupt 25;
  317          // void  PWM1_Isr()  interrupt 26;
  318          // void  PWM2_Isr()  interrupt 27;
C251 COMPILER V5.60.0,  isr                                                                16/07/23  02:20:40  PAGE 6   



Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1444     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        14     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         9     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

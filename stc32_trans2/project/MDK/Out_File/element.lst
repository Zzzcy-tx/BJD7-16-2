C251 COMPILER V5.60.0,  element                                                            17/07/23  21:39:49  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE element
OBJECT MODULE PLACED IN .\Out_File\element.obj
COMPILER INVOKED BY: D:\Program files\Keil251\C251\BIN\C251.EXE ..\CODE\element.c LARGE INTR2 WARNINGLEVEL(3) OPTIMIZE(0
                    -,SPEED) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;.
                    -.\CODE;..\USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\element.lst) TABS(2) OBJECT(.\Out_File\element.obj) 

stmt  level    source

    1          #include "element.h"
    2          #define HALL_PIN P26
    3          uint8 leave_flag = 0;             //出库阶段0:直行阶段1:右转阶段2:正常行驶
    4          float angle = 0;                  //角速度积分量，即旋转角度，全局变量
    5          uint8 angle_integral_flag = 0;    //角速度积分标志位，1为启用
    6          int16 distance = 0;               //路程积分，1为启用，全局变量
    7          uint8 distance_integral_flag = 0; //路程积分标志位
    8          uint8 into_flag = 1;              //入库阶段1:选择2:倒车
    9          uint8 hall_trigged = 0;
   10          
   11          // control函数在renew函数中被循环调用
   12          void control()
   13          {
   14   1          //陀螺仪积分
   15   1          if (angle_integral_flag)
   16   1          {
   17   2              angle += gyro * 0.005;
   18   2          }
   19   1      
   20   1          //编码器积分
   21   1          if (distance_integral_flag)
   22   1          {
   23   2              distance += (speedL + speedR) / 2;
   24   2          }
   25   1      
   26   1      
   27   1          // LR_go();
   28   1      
   29   1          //出库
   30   1          if (leave_flag == 0 && sp_set != 0)
   31   1          {
   32   2              distance_integral_flag = 1; //启动路程积分
   33   2              pidL.setpoint = 80;
   34   2              pidR.setpoint = 80;
   35   2              hall_trigged = 0;
   36   2              //直线行驶一段距离
   37   2      
   38   2              if (distance >= 3600)
   39   2              {
   40   3                  leave_flag++;
   41   3                  distance = 0;
   42   3                  distance_integral_flag = 0; //关闭路程积分
   43   3              }
   44   2          }
   45   1          else if (leave_flag == 1)
   46   1          {
   47   2              angle_integral_flag = 1; //启动陀螺仪积分
   48   2              if (start_diration == 0)
   49   2              {
   50   3                  pidL.setpoint = 0; //左转
   51   3                  pidR.setpoint = 90;
   52   3              }
   53   2              else
   54   2              {
   55   3                  pidL.setpoint = 90; //右转
   56   3                  pidR.setpoint = 0;
   57   3              }
C251 COMPILER V5.60.0,  element                                                            17/07/23  21:39:49  PAGE 2   

   58   2      
   59   2              hall_trigged = 0;
   60   2              if (fabs(angle) >= 700)
   61   2              {
   62   3                  angle_integral_flag = 0; //关闭陀螺仪积分
   63   3                  angle = 0;               //角度复位
   64   3                  leave_flag++;
   65   3                  hall_trigged = 0;
   66   3              }
   67   2          }
   68   1          else if (leave_flag == 2)
   69   1          {
   70   2              distance_integral_flag = 1; //启动路程积分
   71   2              hall_trigged = 0;           //防止直接进入入库模式
   72   2              if (distance >= 15000)
   73   2              {
   74   3                  leave_flag++;
   75   3                  distance_integral_flag = 0; //关闭路程积分
   76   3                  distance = 0;
   77   3              }
   78   2          }
   79   1      
   80   1          if (HALL_PIN == 0)
   81   1          {
   82   2              hall_trigged = 1;
   83   2          }
   84   1      
   85   1          //入库
   86   1          if (into_flag == 1 && hall_trigged == 1)
   87   1          {
   88   2              distance_integral_flag = 1;
   89   2              if (distance >= ku_distance)
   90   2              {
   91   3                  sp_set = 0;
   92   3                  if ((speedL + speedR) / 2 <= 7)
   93   3                  {
   94   4                      into_flag++;
   95   4                      distance_integral_flag = 0;
   96   4                      distance = 0;
   97   4                  }
   98   3              }
   99   2          }
  100   1          else if (into_flag == 2) //旋转90°
  101   1          {
  102   2              angle_integral_flag = 1;
  103   2              if (start_diration == 0)
  104   2              {
  105   3                  setSpeedL(-(int16)((2 * into_R - 0.18) / (2 * into_R + 0.18) * (float)aimed_into_speed));
  106   3                  setSpeedR(-aimed_into_speed);
  107   3              }
  108   2              else
  109   2              {
  110   3                  setSpeedL(-aimed_into_speed);
  111   3                  setSpeedR(-(int16)((2 * into_R - 0.18) / (2 * into_R + 0.18) * (float)aimed_into_speed));
  112   3              }
  113   2      
  114   2              // setPidLR(27.4, 12, 0, 9000);
  115   2              // setPidW(3.68, 0, 9.86);
  116   2              // angle_integral_flag = 1;      //启动陀螺仪积分
  117   2              // pidW.setpoint = -2500;        //角度环目标值(即90度)
  118   2              // PIDRegulation1(&pidW, angle); //角度环计算
  119   2              // // setSpeedL(-pidW.result / 100 * 3 / 30); //设置目标速度
  120   2              // setSpeedL(0);
  121   2              // setSpeedR(-pidW.result / 100); //设置目标速度
  122   2              if (fabs(angle) >= 2100) //积分量达到目标(90度不到一点)
  123   2              {
C251 COMPILER V5.60.0,  element                                                            17/07/23  21:39:49  PAGE 3   

  124   3                  into_flag++;
  125   3                  // sp_set = 0;
  126   3              }
  127   2          }
  128   1          else if (into_flag == 3) //直线倒车
  129   1          {
  130   2              // setPidW(6, 0, 11);                  //角度环参数，距离太短不太好调
  131   2              // pidW.setpoint = -2500;              //角度环目标值
  132   2              // PIDRegulation1(&pidW, angle);       // PID计算
  133   2              // setSpeedR(-pidW.result / 90 - 100); //速度设定
  134   2              // setSpeedL(pidW.result / 90 - 100);  //速度设定
  135   2              setSpeedLR(-aimed_into_speed);
  136   2              distance_integral_flag = 1; //启动路程积分
  137   2      
  138   2              if (distance <= -2000) //到达目标距离
  139   2              {
  140   3                  into_flag++;                //入库完成
  141   3                  distance = 0;               //距离复位
  142   3                  distance_integral_flag = 0; //关闭路程积分
  143   3                  angle_integral_flag = 0;    //关闭陀螺仪积分
  144   3                  angle = 0;                  //角度复位
  145   3                  sp_set = 0;                 //停车
  146   3              }
  147   2          }
  148   1      }
  149          
  150          void LR_go(){   //判断左发右发并初始化
  151   1          int16 i=0;
  152   1          if (start_diration == 0){
  153   2              HO_cnt = 0;
  154   2              Ring_cnt = 0;
  155   2          }
  156   1          else{   //start_direction=1
  157   2              for(i = 0; i++ ; i<5){
  158   3                  if(PO_or_OBSTACLE[i] == -1){
  159   4                      break;
  160   4                  }
  161   3              }
  162   2              HO_cnt = i-1;
  163   2              for(i = 0; i++ ; i<5){
  164   3                  if(RingR[i] == -1){
  165   4                      break;
  166   4                  }
  167   3              }
  168   2              Ring_cnt = i-1;
  169   2          }
  170   1          
  171   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1122     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        13     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
C251 COMPILER V5.60.0,  element                                                            17/07/23  21:39:49  PAGE 4   

  hconst size          =        46     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

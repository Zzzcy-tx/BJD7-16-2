C251 COMPILER V5.60.0,  main                                                               16/07/23  02:20:40  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Out_File\main.obj
COMPILER INVOKED BY: D:\keil5\C251\BIN\C251.EXE ..\USER\src\main.c LARGE INTR2 WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BROWSE 
                    -INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\
                    -inc;..\USER\src) DEBUG PRINT(.\Out_File\main.lst) OBJECT(.\Out_File\main.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file                main
   11           * @company                     成都逐飞科技有限公司
   12           * @author              逐飞科技(QQ790875685)
   13           * @version             查看doc内version文件 版本说明
   14           * @Software            MDK FOR C251 V5.60
   15           * @Target core         STC16F40K128
   16           * @Taobao              https://seekfree.taobao.com/
   17           * @date                2020-12-18
   18           ********************************************************************************************************
             -************/
   19          
   20          #include "headfile.h"
   21          #include "data.h"
   22          #include "other.h"
   23          #include "speed.h"
   24          #include "pid.h"
   25          #include "element.h"
   26          #include "kaerman.h"
   27          #include "keyboard.h"
   28          #include "filter.h"
   29          /*
   30           *关于内核频率的设定，可以查看board.h文件
   31           *在board_init中,已经将P54引脚设置为复位
   32           *如果需要使用P54引脚,可以在board.c文件中的board_init()函数中删除SET_P54_RESRT即可
   33           */
   34          int i_count = 20;
   35          #define HALL_PIN P26
   36          extern float k1;
   37          uint32 last_time_count = 0;
   38          void main()
   39          {
   40   1      
   41   1        // sys_clk可选值:33177600, 30000000, 27000000. 24000000, 22118400, 20000000, 18432000, 12000000, 110592
             -00, 6000000, 5529600。
   42   1        //设置系统频率，此频率需要跟STC-ISP软件中的 <输入用户程序运行时的IRC频率>选项的频率一致。
   43   1        //如果频率设置不对，将会导致串口的数据不正常,PWM的工作不正常等等。
   44   1        sys_clk = 30000000; //设置系统频率为30MHz
   45   1      
   46   1        board_init();
   47   1        allInit();
   48   1        // ips200_init();
   49   1        // ips200_clear(WHITE);
   50   1        // delay_ms(1000);
   51   1        pit_timer_ms(TIM_4, 5); //启用中断
   52   1        exit_init(INT0_P32, FALLING_EDGE);
   53   1         setPidLR(20, 8, 0, 16000);
   54   1         setSpeedLR(110);
C251 COMPILER V5.60.0,  main                                                               16/07/23  02:20:40  PAGE 2   

   55   1         setPidS(8, 0, 1);
   56   1         pidS.setpoint = 0;
   57   1         pidW.setpoint = 0;
   58   1      
   59   1        while (i_count)
   60   1        {
   61   2          delay_ms(10);
   62   2          i_count--;
   63   2          gyro_add += (float)KalmanFilter((double)imu963ra_gyro_z);
   64   2        }
   65   1        gyro_add /= 20;
   66   1        sp_set = 0;
   67   1        P77 = 0;
   68   1        while (1)
   69   1        {
   70   2          if (  /*P50 && */fanL < 10)
   71   2          {
   72   3            Keystroke_Scan();
   73   3            Keystroke_Menu();
   74   3          }
   75   2          if (finish_flag)
   76   2          {
   77   3            rx_analysis();
   78   3            finish_flag = 0;
   79   3          } //无线调参解析函数
   80   2      
   81   2          // if (last_time_count != time_count && sp_set != 0)
   82   2          // {
   83   2          //   printf("%ld,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", time_count, adc_data[0], adc_data[1], adc_data[2], a
             -dc_data[3], adc_data[4], adc_data[5], adc_data[6], adc_data[7], adc_data[8], adc_data[9]);
   84   2          //   printf(",%d,%f,%d,%d,%f,%f,%f,%f,%f,%f", sp_set, k, speedL, speedR, gyro, pidL.setpoint, pidL.pr
             -oportiongain, pidL.integralgain, pidR.proportiongain, pidR.integralgain);
   85   2          //   printf(",%f,%f,%f,%f,%f", pidL.result, pidR.result, pidS.proportiongain, pidS.derivativegain, pi
             -dS.result);
   86   2          //   printf(",%f,%f,%f,%f,%f,%f,%f\n", G_S * gyro, pidL.preerror, pidL.integral, pidR.preerror, pidR.
             -integral, pidS.preerror, pidS.derivativegain);
   87   2          //   last_time_count = time_count;
   88   2          // }
   89   2          // printf("%d,%d,%f,%f,%f,%d,%f\n", speedL, speedR, pidL.result, pidR.result, k, speed3, gyro);
   90   2          setPidLR(P_LR, I_LR, 0, 15000); //设置速度环参数
   91   2                                          // setPidS(P_S, 0, D_S);           //设置方向环参数
   92   2          // setPidS(P_S, 0, D_S);        //设置方向环参数
   93   2          setPidW(P_W, 0, D_W); //设置角度环参数
   94   2      
   95   2          if (sp_set <= 2)
   96   2          {
   97   3            fanL = 0;
   98   3          }
   99   2          pwm_duty(PWMB_CH1_P74, fanL);
  100   2      
  101   2          sp_set_max = sp_set;
  102   2          //  printf("%d,%d,%d,%f,%f,%f,%d,%d,%d,%f,%f,%d\n", adc_data[0], adc_data[4], aimed_into_speed, into_
             -R, angle, all_angle, adc_data[2], tof_distance, leave_flag, k, pidS.result, dodge_flag);
  103   2          //   printf("%d,%d,%d\n", imu963ra_mag_x, imu963ra_mag_y, imu963ra_mag_z);
  104   2          //   printf("%d,%d,%d,%d,%d,%d",imu963ra_acc_x,imu963ra_acc_y,imu963ra_acc_z,imu963ra_gyro_x,imu963ra
             -_gyro_y,imu963ra_gyro_z);
  105   2          //  printf("%d,%d,%d,%d,%f,%d,%d,%f,%f,%f,%d,%d,%f,%f\n", adc_data[2], adc_data[0], adc_data[4], dodg
             -e_flag, angle1, distance1, sp_set, P_S, D_S, G_S, annulus_flag, k_add, gyro, pidS.result);
  106   2          //     printf("%f,%f,%f,%f,%f,%f,%f\n", angle, pidW.result / 90, pidL.setpoint, pidR.setpoint, pidL.r
             -esult, pidR.result, k, aimed_angle);
  107   2          //   printf("%d\n", dl1a_distance_mm);
  108   2          //   printf("%f,%f\n",k,pidS.result);
  109   2          //  printf("%d,%d,%d,%d,%d,%f,%f,%f,%f,%f,%f,", adc_data[9] - adc_data[2], adc_data[9], adc_data[2], 
             -adc_data[0], adc_data[4], pidL.setpoint, pidR.setpoint, pidL.result, pidR.result, pidS.result, k);
  110   2          //  printf("%f,%d,%d,%f,%d\n", k1, speedL, speedR, ((float)speedL + (float)speedR) / 2 * 200 / 10100,
             - into_flag);
C251 COMPILER V5.60.0,  main                                                               16/07/23  02:20:40  PAGE 3   

  111   2          //  printf("%d,%d,%d,%d,%d,%d,%f,%f,%f,%f\n",adc_data[0],adc_data[1],adc_data[2],adc_data[3],adc_data
             -[4],sp_set,P_LR,I_LR,P_S,D_S);
  112   2          //  printf("%d,%f,%f,%f,%d,%d,%f,%f,%d,%f,%d,%d,%d\n", adc_data[5], pidS.result, pidL.result, pidR.re
             -sult, speedL, speedR, gyro, all_angle, distance1, k, dl1a_distance_mm, dodge_flag, annulus_flag,(adc_data[]));
  113   2          //    printf("%d,%d,%d,%f,%f,%f,%f,%f,%d,%d,%f,%f,%f\n",adc_data[0],adc_data[2],adc_data[3],pidL.prop
             -ortiongain,pidL.integralgain,pidS.proportiongain,pidS.derivativegain,k,speedL,speedR,pidL.result,pidR.result);
  114   2          //    printf("%f\n",pidS.result);
  115   2          // printf("%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", adc_sum[0], adc_sum[1], adc_sum[2], adc_sum[3], ad
             -c_sum[4], adc_sum[5], adc_sum[6], adc_sum[7], adc_sum[8], adc_sum[9], Gui_flag, t);
  116   2          printf("%f,%f,%f,%f,%f,%d\n",pidL.setpoint,pidR.setpoint,pidL.result,pidS.result,angle2,dodge_flag);
  117   2          // printf("%d,%d,%d,%d,%d,%d,%d\n",adc_data[0],adc_data[1],adc_d[2],adc_d[3],adc_d[4],Gui_flag,t);
  118   2          // printf("%d,%d,%f,%f,%f,%f,%f,%f,%f,%f\n",adc_data[0],Max_Ad[0],Adc_gui[0],Adc_gui[1],Adc_gui[2],Ad
             -c_gui[3],Adc_gui[4],Adc_gui[5],Adc_gui[6],Adc_gui[7]);
  119   2        }
  120   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       519     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =         6     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        35     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
